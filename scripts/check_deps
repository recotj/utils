#!/usr/bin/env node

'use strict';

const pkgJSON = require('../package.json');
const shouldRun = Boolean(pkgJSON['_where']);

if (!shouldRun) return;

installSemver((error) => {
	if (error) console.error(error);
	else checkDeps();
});

function checkDeps(done) {
	const semver = require('semver');

	done = done || noop;
	let error, pkgJSON;

	try {
		pkgJSON = require('../package.json');
	} catch (e) {
		error = e;
	}

	if (error) return done(error);

	const projectDir = pkgJSON['_where'] || process.cwd();
	const devDepMap = pkgJSON['devDependencies'] || {};
	const depMap = pkgJSON['dependencies'] || {};

	const deps = [].concat(Object.keys(devDepMap), Object.keys(depMap));

	const total = deps.length;
	let finished = 0;
	let allInstalled = true;

	deps.forEach((dep) => {
		let shouldInstall = true;
		let where = projectDir;
		try {
			const versionExisted = require(`${dep}/package.json`).version;
			const versionExpected = devDepMap[dep] || depMap[dep];

			// existed.
			if (semver.satisfies(versionExisted, versionExpected) || /\.git$/.test(versionExpected)) {
				shouldInstall = false;
			} else {
				where = undefined;
			}
		} catch (err) {
		}

		if (!shouldInstall) {
			console.log(`${dep} already installed.`);
			finished += 1;
			return;
		}

		allInstalled = false;

		console.log(`start to install ${dep} in ${where || __dirname} ...`);

		const errors = [];

		installModule(dep, where, {
			onerror(error) {
				errors.push(error);
			},
			onclose() {
				finished += 1;
				console.log(`complete:  ${finished}/${total}\n\n`);

				if (finished === total) {
					const error = errors.length === 0 ? undefined : errors.join('\n\n');
					done(error);
				}
			}
		});
	});

	if (allInstalled) done();
}

function installSemver(done) {
	done = done || noop;

	let shouldInstall = true;
	try {
		require.resolve('semver');
		shouldInstall = false;
	} catch (e) {
	}

	if (!shouldInstall) {
		console.log('semver already installed');
		return done();
	}

	installModule('semver', {
		onclose(error) {
			done(error);
		}
	});
}

function installModule(moduleId, dir, hooks) {
	if (typeof dir === 'object') {
		let temp = dir;
		dir = hooks;
		hooks = temp;
	}

	// hooks
	hooks = hooks || {};
	const ondata = hooks.ondata || noop;
	const onerror = hooks.onerror || noop;
	const onclose = hooks.onclose || noop;

	const spawn = require('child_process').spawn;
	const install = spawn('npm', ['install', moduleId], {cwd: dir});

	const records = {};

	install.stdout.on('data', (data) => {
		console.log(`stdout: ${data}`);
		records.data = data;
		ondata(data);
	});
	install.stderr.on('data', (error) => {
		console.error(`stderr: ${error}`);
		records.error = error;
		onerror(error);
	});
	install.on('close', () => {
		console.log(`finish ${moduleId} installation\n`);
		onclose(records.error, records.data);
	});
}

function noop(err) {
	if (err) console.error(err);
}
